import ROOT as R
import math as M
import argparse
import os

def Map(tf):
    """
    Maps objets as dict[obj_name][0] using a TFile (tf) and TObject to browse.
    """
    m = {}
    for k in tf.GetListOfKeys():
        n = k.GetName()
        m[n] = tf.Get(n)
    return m

def saveCanvas(c,n):
    defaultTitle(0.1,0.93,args.title)
    c.SaveAs(args.output+"/"+n+".png")

def defaultTitle(x,y,text):
    t=R.TLatex()
    t.SetTextSize(0.035)
    t.DrawLatexNDC(x,y,text)

parser = argparse.ArgumentParser()
parser.add_argument('--input',dest='input')
parser.add_argument('--output',dest='output')
parser.add_argument('--title',dest='title')
parser.add_argument('--layout',dest='layout')
args = parser.parse_args()

f=R.TFile(args.input)
histos=Map(f)

if not os.path.exists(args.output):
    os.makedirs(args.output)

#print histos
R.gROOT.SetBatch(True)
c1=R.TCanvas("c1","c1",800,600)
R.gStyle.SetOptStat(0)
R.gStyle.SetOptTitle(0)

R.gStyle.SetOptFit(111)
histos['mtdTrack_dt'].GetXaxis().SetTitle("t_{track}-t_{vtx} [ns]")
histos['mtdTrack_dt'].Draw()
histos['mtdTrack_dt'].Fit("gaus")
saveCanvas(c1,"mtdTrack_dt")
R.gStyle.SetOptFit(0)

histos['mtdTrack_dt_vs_pt'].FitSlicesY()
h=f.Get('mtdTrack_dt_vs_pt_2')
h.SetMinimum(0)
h.SetMaximum(0.06)
h.GetXaxis().SetTitle("p_{T} [GeV]")
h.GetYaxis().SetTitle("#sigma_{t} (track-vtx) [ns]")
h.GetYaxis().SetTitleOffset(1.25)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_dt_vs_pt")

histos['mtdTrack_dt_vs_eta'].FitSlicesY()
h=f.Get('mtdTrack_dt_vs_eta_2')
h.SetMinimum(0)
h.SetMaximum(0.06)
h.GetXaxis().SetTitle("|#eta|")
h.GetYaxis().SetTitle("#sigma_{t} (track-vtx) [ns]")
h.GetYaxis().SetTitleOffset(1.25)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_dt_vs_eta")

R.gStyle.SetOptFit(111)
histos['mtdTrack_ptRes'].GetXaxis().SetTitle("p_{T}/p_{T}^{true} - 1")
histos['mtdTrack_ptRes'].Draw()
histos['mtdTrack_ptRes'].Fit("gaus")
saveCanvas(c1,"mtdTrack_ptRes")
R.gStyle.SetOptFit(0)

histos['mtdTrack_ptRes_vs_pt'].FitSlicesY()
h=f.Get('mtdTrack_ptRes_vs_pt_2')
h.SetMinimum(0)
h.SetMaximum(0.015)
h.GetXaxis().SetTitle("p_{T} [GeV]")
h.GetYaxis().SetTitle("#sigma (p_{T}/p_{T}^{true})")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_ptRes_vs_pt")

histos['mtdTrack_ptRes_vs_eta'].FitSlicesY()
h=f.Get('mtdTrack_ptRes_vs_eta_2')
h.SetMinimum(0)
h.SetMaximum(0.03)
h.GetXaxis().SetTitle("|#eta|")
h.GetYaxis().SetTitle("#sigma (p_{T}/p_{T}^{true})")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_ptRes_vs_eta")

R.gStyle.SetOptFit(111)
histos['mtdTrack_dz'].GetXaxis().SetTitle("#Delta_{z}(trk-vtx) [cm]")
histos['mtdTrack_dz'].Draw()
histos['mtdTrack_dz'].Fit("gaus")
saveCanvas(c1,"mtdTrack_dz")
R.gStyle.SetOptFit(0)

histos['mtdTrack_dz_vs_pt'].FitSlicesY()
h=f.Get('mtdTrack_dz_vs_pt_2')
h.SetMinimum(0)
h.SetMaximum(0.03)
h.GetXaxis().SetTitle("p_{T} [GeV]")
h.GetYaxis().SetTitle("#sigma(#Delta_{z}(trk-vtx)) [cm]")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_dz_vs_pt")

histos['mtdTrack_dz_vs_eta'].FitSlicesY()
h=f.Get('mtdTrack_dz_vs_eta_2')
h.SetMinimum(0)
h.SetMaximum(0.03)
h.GetXaxis().SetTitle("|#eta|")
h.GetYaxis().SetTitle("#sigma(#Delta_{z}(trk-vtx)) [cm]")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"mtdTrack_dz_vs_eta")


histos['matchedCluster_size'].GetXaxis().SetTitle("cluster size")
histos['matchedCluster_size'].Draw()
saveCanvas(c1,"matchedCluster_size")

histos['matchedCluster_size_vs_pt'].ProfileX()
h=f.Get('matchedCluster_size_vs_pt_pfx')
h.SetMinimum(0)
h.SetMaximum(5.)
h.GetXaxis().SetTitle("p_{T} [GeV]")
h.GetXaxis().SetRangeUser(0.,4.)
h.GetYaxis().SetTitle("<cluster size>")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"matchedCluster_size_vs_pt")

histos['matchedCluster_size_vs_eta'].ProfileX()
h=f.Get('matchedCluster_size_vs_eta_pfx')
h.SetMinimum(0)
h.SetMaximum(5.)
h.GetXaxis().SetTitle("|#eta|")
h.GetYaxis().SetTitle("<cluster size>")
h.GetYaxis().SetTitleOffset(1.35)
h.SetMarkerStyle(20)
h.SetMarkerSize(0.8)
h.Draw()
saveCanvas(c1,"matchedCluster_size_vs_eta")

histos['divide_matchedTrack_eta_by_track_eta'].GetXaxis().SetTitle("|#eta|")
histos['divide_matchedTrack_eta_by_track_eta'].GetYaxis().SetTitle("Efficiency")
histos['divide_matchedTrack_eta_by_track_eta'].SetMinimum(0)
histos['divide_matchedTrack_eta_by_track_eta'].SetMaximum(1.2)
histos['divide_matchedTrack_eta_by_track_eta'].SetMarkerStyle(20)
histos['divide_matchedTrack_eta_by_track_eta'].SetMarkerSize(0.8)
histos['divide_matchedTrack_eta_by_track_eta'].Draw("AP")
histos['divide_mtdTrack_eta_by_track_eta'].SetMarkerStyle(22)
histos['divide_mtdTrack_eta_by_track_eta'].SetMarkerSize(0.8)
histos['divide_mtdTrack_eta_by_track_eta'].SetMarkerColor(R.kRed)
histos['divide_mtdTrack_eta_by_track_eta'].SetLineColor(R.kRed)
histos['divide_mtdTrack_eta_by_track_eta'].Draw("PSAME")
l=R.TLegend(0.75,0.8,0.96,0.93)
l.AddEntry(histos['divide_matchedTrack_eta_by_track_eta'],"MTD Cluster match eff","PL")
l.AddEntry(histos['divide_mtdTrack_eta_by_track_eta'],"Track Time eff","PL")
l.Draw()
saveCanvas(c1,"efficiency_vs_eta")

histos['divide_matchedTrack_phi_by_track_phi'].GetXaxis().SetTitle("#phi")
histos['divide_matchedTrack_phi_by_track_phi'].GetYaxis().SetTitle("Efficiency")
histos['divide_matchedTrack_phi_by_track_phi'].SetMinimum(0)
histos['divide_matchedTrack_phi_by_track_phi'].SetMaximum(1.2)
histos['divide_matchedTrack_phi_by_track_phi'].SetMarkerStyle(20)
histos['divide_matchedTrack_phi_by_track_phi'].SetMarkerSize(0.8)
histos['divide_matchedTrack_phi_by_track_phi'].Draw("AP")
histos['divide_mtdTrack_phi_by_track_phi'].SetMarkerStyle(22)
histos['divide_mtdTrack_phi_by_track_phi'].SetMarkerSize(0.8)
histos['divide_mtdTrack_phi_by_track_phi'].SetMarkerColor(R.kRed)
histos['divide_mtdTrack_phi_by_track_phi'].SetLineColor(R.kRed)
histos['divide_mtdTrack_phi_by_track_phi'].Draw("PSAME")
l=R.TLegend(0.75,0.8,0.96,0.93)
l.AddEntry(histos['divide_matchedTrack_phi_by_track_phi'],"MTD Cluster match eff","PL")
l.AddEntry(histos['divide_mtdTrack_phi_by_track_phi'],"Track Time eff","PL")
l.Draw()
saveCanvas(c1,"efficiency_vs_phi")

histos['divide_matchedTrack_pt_by_track_pt'].GetXaxis().SetTitle("p_{T} [GeV]")
histos['divide_matchedTrack_pt_by_track_pt'].GetYaxis().SetTitle("Efficiency")
histos['divide_matchedTrack_pt_by_track_pt'].SetMinimum(0)
histos['divide_matchedTrack_pt_by_track_pt'].SetMaximum(1.2)
histos['divide_matchedTrack_pt_by_track_pt'].SetMarkerStyle(20)
histos['divide_matchedTrack_pt_by_track_pt'].SetMarkerSize(0.8)
histos['divide_matchedTrack_pt_by_track_pt'].Draw("AP")
histos['divide_mtdTrack_pt_by_track_pt'].SetMarkerStyle(22)
histos['divide_mtdTrack_pt_by_track_pt'].SetMarkerSize(0.8)
histos['divide_mtdTrack_pt_by_track_pt'].SetMarkerColor(R.kRed)
histos['divide_mtdTrack_pt_by_track_pt'].SetLineColor(R.kRed)
histos['divide_mtdTrack_pt_by_track_pt'].Draw("PSAME")
l=R.TLegend(0.75,0.8,0.96,0.93)
l.AddEntry(histos['divide_matchedTrack_pt_by_track_pt'],"MTD Cluster match eff","PL")
l.AddEntry(histos['divide_mtdTrack_pt_by_track_pt'],"Track Time eff","PL")
l.Draw()
saveCanvas(c1,"efficiency_vs_pt")

